local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESP = {
    Enabled = true,
    BoxColor = Color3.fromRGB(255, 255, 255),
    DistanceColor = Color3.fromRGB(255, 255, 255),
    HealthColors = {
        Color3.new(0, 1, 0),
        Color3.new(1, 1, 0),
        Color3.new(1, 0, 0)
    },
    Snapline = true,
    MaxDistance = 300
}

local drawings = {}

local function createESP(player)
    if player == LocalPlayer then return end
    local esp = {
        Box = Drawing.new("Square"),
        Health = Drawing.new("Square"),
        Line = Drawing.new("Line"),
        Distance = Drawing.new("Text")
    }

    for _, d in pairs(esp) do
        d.Visible = false
        if d.Type == "Square" then
            d.Thickness = 2
            d.Filled = false
        end
    end

    esp.Distance.Size = 14
    esp.Distance.Center = true
    esp.Distance.Color = ESP.DistanceColor

    drawings[player] = esp
end

local function updateESP(player, esp)
    if not ESP.Enabled or not player.Character then
        for _, d in pairs(esp) do d.Visible = false end
        return
    end

    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    local head = player.Character:FindFirstChild("Head")
    if not humanoid or humanoid.Health <= 0 or not head then
        for _, d in pairs(esp) do d.Visible = false end
        return
    end

    local dist = (head.Position - Camera.CFrame.Position).Magnitude
    if dist > ESP.MaxDistance then
        for _, d in pairs(esp) do d.Visible = false end
        return
    end

    local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
    if not onScreen then
        for _, d in pairs(esp) do d.Visible = false end
        return
    end

    local scale = 1000 / dist
    local boxSize = Vector2.new(scale, scale * 1.5)

    esp.Box.Size = boxSize
    esp.Box.Position = Vector2.new(screenPos.X - boxSize.X / 2, screenPos.Y - boxSize.Y * 0.75)
    esp.Box.Color = ESP.BoxColor
    esp.Box.Visible = true

    local healthPercent = humanoid.Health / humanoid.MaxHealth
    local color = healthPercent > 0.5 and ESP.HealthColors[1] or healthPercent > 0.25 and ESP.HealthColors[2] or ESP.HealthColors[3]
    esp.Health.Size = Vector2.new(4, boxSize.Y * healthPercent)
    esp.Health.Position = Vector2.new(esp.Box.Position.X - 6, esp.Box.Position.Y + (boxSize.Y * (1 - healthPercent)))
    esp.Health.Color = color
    esp.Health.Visible = true

    esp.Distance.Text = tostring(math.floor(dist)) .. "m"
    esp.Distance.Position = Vector2.new(screenPos.X, screenPos.Y + boxSize.Y / 2 + 12)
    esp.Distance.Visible = true

    if ESP.Snapline then
        esp.Line.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
        esp.Line.To = Vector2.new(screenPos.X, screenPos.Y)
        esp.Line.Color = ESP.BoxColor
        esp.Line.Visible = true
    else
        esp.Line.Visible = false
    end
end

for _, p in pairs(Players:GetPlayers()) do createESP(p) end
Players.PlayerAdded:Connect(createESP)
Players.PlayerRemoving:Connect(function(p)
    if drawings[p] then
        for _, d in pairs(drawings[p]) do d:Remove() end
        drawings[p] = nil
    end
end)

RunService.RenderStepped:Connect(function()
    for player, esp in pairs(drawings) do
        updateESP(player, esp)
    end
end)
